version: '2'

services:
  api:
    image: poseidon-api
    container_name: poseidon-api
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - 8080
    environment:
      - ALLOW_ORIGIN=(env | grep DOCKER_HOST | cut -d':' -f2 | cut -c 3-)
  periodically:
    image: poseidon-periodically
    container_name: poseidon-periodically
    build:
      context: .
      dockerfile: Dockerfile.periodically
    ports:
      - 8000
  docs:
    image: poseidon-docs
    container_name: poseidon-docs
    build:
      context: .
      dockerfile: Dockerfile.docs
    ports:
      - 8000
  mock:
    image: mock-controller
    container_name: mock-controller
    build:
      context: .
      dockerfile: Dockerfile.mock
    ports:
      - 8111
    command: docker run --name mock-controller -dp 8111:8111 -e ALLOW_ORIGIN=$$docker_url:8111 mock-controller
  monitor:
    depends_on:
      - api
    environment:
      - ALLOW_ORIGIN=(env | grep DOCKER_HOST | cut -d':' -f2 | cut -c 3-)
    image: poseidon-monitor
    container_name: poseidon-monitor
    build:
      context: .
      dockerfile: Dockerfile.monitor
    ports:
      - 8000
    command: docker run --name poseidon-monitor -dp 8555:8000 -e ALLOW_ORIGIN=$$docker_url:$$portApi poseidon-monitor
  main:
    image: poseidon-main
    container_name: poseidon-main
    build:
      context: .
      dockerfile: Dockerfile.main
    ports:
      - 8000
  storageWorkaround:
    # http://www.diogogmt.com/running-mongodb-with-docker-and-compose/
    container_name: poseidon-storageWorkaround
    image: mongo
    volumes:
      - /data/db
  storage:
    container_name: poseidon-storage
    image: mongo
    volumes_from:
      - storageWorkaround
    ports:
      - 27017
    command: --smallfiles --rest --auth
