#!/bin/bash

function show_help()
{
    echo "Poseidon, an application that leverages software defined networks (SDN) to acquire and then feed network traffic to a number of machine learning techniques. For more info visit: https://github.com/CyberReboot/poseidon

Usage: poseidon [option]
Options:
    -a,  api           get url to the Poseidon API
    -c,  config        display current configuration info
    -d,  delete        delete Poseidon installation (uses sudo)
    -e,  shell         enter into the Poseidon shell, requires Poseidon to already be running
    -h,  help          print this help
    -i,  install       install Poseidon repo (uses sudo)
    -l,  logs          display the information logs about what Poseidon is doing
    -r,  restart       restart the Poseidon service (uses sudo)
    -s,  start         start the Poseidon service (uses sudo)
    -S,  stop          stop the Poseidon service (uses sudo)
    -u,  update        update Poseidon repo, optionally supply a version or 'master' (uses sudo)
    -v,  viz/visualize get url to visualize Poseidon with CRviz
    -V,  version       get the version installed"
}

function die()
{
    printf '%s\n' "$1" >&2
    exit 1
}

function check_args()
{
    while :; do
        case $1 in
            -a|api)
                if [ "$(docker ps -q --filter "label=com.docker.compose.service=poseidon_api" | wc -l)" -eq 1 ]; then
                    port_map=$(docker port "$(docker ps -q --filter "label=com.docker.compose.service=poseidon_api")" 8000/tcp)
                    port=$(echo "$port_map" | cut -d':' -f2)
                    # TODO `ip` doesn't work on OSX
                    default_iface=$(ip route list | head -1 | awk '{print $5}')
                    default_ip=$(ip addr show dev "$default_iface" | awk '$1 == "inet" { sub("/.*", "", $2); print $2 }' | head -1)
                    echo "Poseidon API endpoints are accessible here: http://$default_ip:$port/v1"
                else
                    echo "Poseidon API is not running."
                fi
                exit
                ;;
            -c|config)
                cat "$POSEIDON_PREFIX"/opt/poseidon/poseidon.config
                exit
                ;;
            -d|delete)
                echo "TODO"
                exit
                ;;
            -h|\?|help)
                show_help
                exit
                ;;
            -i|install)
                # TODO check for docker, curl, jq
                if [ -z "$2" ]; then
                    curl -s https://api.github.com/repos/cyberreboot/poseidon/releases/latest | jq '.["tarball_url"]' | xargs curl -L > /tmp/poseidon.tar.gz
                else
                    curl -L https://github.com/cyberreboot/poseidon/tarball/$2 > /tmp/poseidon.tar.gz
                fi
                sudo mkdir -p "$POSEIDON_PREFIX"/opt/poseidon
                sudo tar -C "$POSEIDON_PREFIX"/opt/poseidon -xvf /tmp/poseidon.tar.gz --strip=1
                sudo chmod -R 755 "$POSEIDON_PREFIX"/opt/poseidon
                sudo cp "$POSEIDON_PREFIX"/opt/poseidon/config/poseidon.config "$POSEIDON_PREFIX"/opt/poseidon/poseidon.config
                rm -f /tmp/poseidon.tar.gz
                exit
                ;;
            -l|logs)
                tail -n 100 -f /var/log/poseidon/poseidon.log
                exit
                ;;
            -r|restart)
                # TODO account for standalone
                poseidon stop && poseidon start
                exit
                ;;
            -e|shell)
                if [ "$(docker ps -q --filter "label=com.docker.compose.service=poseidon" | wc -l)" -eq 1 ]; then
                    docker exec -it "$(docker ps -q --filter "label=com.docker.compose.service=poseidon")" python3 poseidon/cli/cli.py "${@:2}"
                else
                    echo "Poseidon isn't running, you must first start Poseidon to use the shell."
                fi
                exit
                ;;
            -s|start)
                if [ "$(docker ps -q --filter "label=com.docker.compose.project=poseidon" | wc -l)" -gt 0 ]; then
                   echo "Found at least part of Poseidon already running, cleaning up first."
                   poseidon stop
                fi
                echo "Starting Poseidon..."
                pushd "$(pwd)" && cd "$POSEIDON_PREFIX"/opt/poseidon
                echo "`pwd`"
                sudo mkdir -p "$POSEIDON_PREFIX"/opt/redis
                sudo mkdir -p "$POSEIDON_PREFIX"/opt/vent_files
                sudo chmod 777 "$POSEIDON_PREFIX"/opt/redis
                sudo chmod 777 "$POSEIDON_PREFIX"/opt/vent_files
                sudo touch "$POSEIDON_PREFIX"/opt/poseidon/.poseidon_history
                sudo chmod 777 "$POSEIDON_PREFIX"/opt/poseidon/.poseidon_history
                if [ "$2" = "--standalone" ]; then
                    docker-compose -f docker-compose.yaml up --build -d
                else
                    echo "Checking volumes..."
                    check_files
                    sudo mkdir -p "$POSEIDON_PREFIX"/opt/grafana
                    sudo mkdir -p "$POSEIDON_PREFIX"/opt/prometheus
                    sudo chmod 777 "$POSEIDON_PREFIX"/opt/grafana
                    sudo chmod 777 "$POSEIDON_PREFIX"/opt/prometheus
                    docker-compose -f docker-compose.yaml -f helpers/faucet/docker-compose-experimental.yaml up --build -d
                fi
                echo -n "Waiting for Poseidon to become healthy..."
                until [ "$(docker ps -q --filter "label=com.docker.compose.service=poseidon")" ] && [ "$(docker inspect poseidon_poseidon_1 -f \{\{.State.Health.Status\}\})" = "healthy" ]
                do
                    echo -n "\\"
                    echo -en "\\b"
                    sleep 0.3
                    echo -n "|"
                    echo -en "\\b"
                    sleep 0.3
                    echo -n "/"
                    echo -en "\\b"
                    sleep 0.3
                    echo -n "-"
                    echo -en "\\b"
                    sleep 0.3
                done
                echo "Poseidon successfully started."
                popd > /dev/null 2>&1
                exit
                ;;
            -S|stop)
                echo "Stopping Poseidon..."
                if [ "$(docker ps -q --filter "label=com.docker.compose.project=poseidon" | wc -l)" -gt 0 ]; then
                    (docker ps -q --filter "label=com.docker.compose.project=poseidon" | xargs docker rm -f) && echo "Poseidon successfully stopped."
                else
                    echo "Poseidon is not running."
                fi
                exit
                ;;
            -u|update)
                # TODO update this script
                cp "$POSEIDON_PREFIX"/opt/poseidon/poseidon.config /tmp/poseidon.config 2>/dev/null
                sudo rm -rf "$POSEIDON_PREFIX"/opt/poseidon
                if [ -z "$2" ]; then
                    echo "Updating to latest release..."
                    poseidon install
                else
                    echo "Updating to $2..."
                    poseidon install $2
                fi
                mv /tmp/poseidon.config "$POSEIDON_PREFIX"/opt/poseidon/poseidon.config 2>/dev/null
                exit
                ;;
            -v|viz|visualize)
                if [ "$(docker ps -q --filter "label=com.docker.compose.service=crviz" | wc -l)" -eq 1 ]; then
                    port_map=$(docker port "$(docker ps -q --filter "label=com.docker.compose.service=crviz")" 5000/tcp)
                    api_port_map=$(docker port "$(docker ps -q --filter "label=com.docker.compose.service=poseidon_api")" 8000/tcp)
                    port=$(echo "$port_map" | cut -d':' -f2)
                    api_port=$(echo "$api_port_map" | cut -d':' -f2)
                    default_iface=$(awk '$2 == 00000000 { print $1 }' /proc/net/route)
                    # TODO `ip` is not a command on OSX
                    default_ip=$(ip addr show dev "$default_iface" | awk '$1 ~ /^inet/ { sub("/.*", "", $2); print $2 }' | head -1)
                    echo "CRviz is connected to Poseidon and accessible here:"
                    echo "http://$default_ip:$port/?dataSourceName=Poseidon Network&dataSourceUrl=http://$default_ip:$api_port/v1/network"
                else
                    echo "CRviz is not running."
                fi
                exit
                ;;
            -V|version)
                if [ ! -f "$POSEIDON_PREFIX"/opt/poseidon/VERSION ]; then
                    echo "Poseidon not installed!"
                else
                    cat "$POSEIDON_PREFIX"/opt/poseidon/VERSION
                fi
                exit
                ;;
            ?*)
                printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
                ;;
            *)
                break
        esac
        shift
    done
}

function check_files()
{
    if [ ! -d /var/log/faucet ]; then
        sudo mkdir -p /var/log/faucet
    fi
    if [ -d /var/log/faucet/faucet.log ]; then
        sudo rm -rf /var/log/faucet/faucet.log
    fi
    if [ -d /var/log/faucet/faucet_exception.log ]; then
        sudo rm -rf /var/log/faucet/faucet_exception.log
    fi
    if [ ! -f /var/log/faucet/faucet.log ]; then
        sudo touch /var/log/faucet/faucet.log
    fi
    if [ ! -f /var/log/faucet/faucet_exception.log ]; then
        sudo touch /var/log/faucet/faucet_exception.log
    fi

    if [ ! -d /var/log/poseidon ]; then
        sudo mkdir -p /var/log/poseidon
        sudo chmod -R 755 /var/log/poseidon
    fi
    if [ -d /var/log/poseidon/poseidon.log ]; then
        sudo rm -rf /var/log/poseidon/poseidon.log
    fi
    if [ ! -f /var/log/poseidon/poseidon.log ]; then
        sudo touch /var/log/poseidon/poseidon.log
    fi

    if [ ! -d "$POSEIDON_PREFIX"/etc/faucet/ ]; then
        sudo mkdir -p "$POSEIDON_PREFIX"/etc/faucet/
    fi
    if [ -d "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml ]; then
        sudo rm -rf "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml
    fi
    if [ ! -f "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml ]; then
        sudo touch "$POSEIDON_PREFIX"/etc/faucet/faucet.yaml
    fi
}

# entry point
if [ $# -gt 0 ]; then
    if [[ ( $# -eq 2 && $1 == "install" ) || ( $# -eq 2 && $1 == "-i" ) || ( $# -eq 2 && $1 == "start" ) || ( $# -eq 2 && $1 == "-s" ) || ( $# -eq 2 && $1 == "update" ) || ( $# -eq 2 && $1 == "-u" ) || ( $# -eq 1 ) || ( $1 == "shell" ) || ( $1 == "-e" ) ]]; then
        check_args "$@"
    else
        show_help
    fi
else # print help
    show_help
fi
